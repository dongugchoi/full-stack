1. 사용자 설정 테마 관리
- 사용자가 앱 내에서 다크 모드와 라이트 모드를 선택할 수 있게 만들자
-ThemeContext를 이용해서 테마상태를 전역으로 관리하고, 앱 전체에 테마가 반영되도록
ThemeContext.js
ThemedComponent
-화면의 배경이 어두웠다가 밝아졌다가 할 수 있도록 하기
-화면 가운데 텍스트도 'Dark Mode' 'Light Mode'
-버튼을 누르면 다크모드와 라이트모드로 바뀌도록 설정
dark : #333 light: #fff
-StyleSheet

2. 장바구니 관리
useReducer()
현재 상태와, 상태를 어떻게 업데이트할지를 정의한 함수를 통해 새로운 상태를 반환

주요 개념
state : 현재 컴포넌트의 상태값
action : 상태를 어떻게 변경할지 나타내는 "명령"
reducer : 현재 상태와 액션을 받아서 새로운 상태를 반환하는 함수

기본문법
액션을 리듀서함수로 보내는 역할
const [state, dispatch] = useReducer(reducer, initialState);



function reducer(state,action){
	switch(action.type){
		case 'INCREMENT':
			return { count : state.count+1};
		case 'DECREMENT':
			return { count : state.count-1};
  }
}

<Button onClick={() => dispatch({type : 'INCREMENT'})}/>
<Button onClick={() => dispatch({type : 'DECREMENT'})}/>

언제 useReducer를 사용할까?
1. 상태가 여러개일 때 : useState를 사용해 각각의 상태를 관리하기보다는 하나의 state 객체로
묶어서 관리하는 것이 효율적이기 때문이다.

2. 복잡한 로직이 필요할 때 : 상태 변경에 따라 다양한 조건을 검토하고, 여러 단계를 거쳐서
상태를 변경해야 할 때

3. 상태 업데이트 로직을 컴포넌트 밖으로 분리하고 싶을 때
ruducer함수는 컴포넌트 외부에 둘 수도 있어서, 상태 관리 로직을 명확히 분리할 수 있다.